/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.93.0
  Forc version: 0.62.0
  Fuel-Core version: 0.31.0
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum, Vec } from "./common";

export enum AccessErrorInput { NotOwner = 'NotOwner' };
export enum AccessErrorOutput { NotOwner = 'NotOwner' };
export enum DistributionErrorInput { CanNotSendZero = 'CanNotSendZero', AssetNotBaseId = 'AssetNotBaseId', AmountIsZero = 'AmountIsZero' };
export enum DistributionErrorOutput { CanNotSendZero = 'CanNotSendZero', AssetNotBaseId = 'AssetNotBaseId', AmountIsZero = 'AmountIsZero' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum InitializationErrorInput { CannotReinitialized = 'CannotReinitialized' };
export enum InitializationErrorOutput { CannotReinitialized = 'CannotReinitialized' };
export enum PauseErrorInput { Paused = 'Paused', NotPaused = 'NotPaused' };
export enum PauseErrorOutput { Paused = 'Paused', NotPaused = 'NotPaused' };
export type StateInput = Enum<{ Uninitialized: [], Initialized: IdentityInput, Revoked: [] }>;
export type StateOutput = Enum<{ Uninitialized: [], Initialized: IdentityOutput, Revoked: [] }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type OwnershipSetInput = { new_owner: IdentityInput };
export type OwnershipSetOutput = { new_owner: IdentityOutput };

export interface PropsFeeSplitterContractAbiInterface extends Interface {
  functions: {
    owner: FunctionFragment;
    distribute_funds: FunctionFragment;
    fee: FunctionFragment;
    get_share: FunctionFragment;
    receive_funds: FunctionFragment;
    set_fee: FunctionFragment;
    set_shares: FunctionFragment;
    total_shares: FunctionFragment;
    is_paused: FunctionFragment;
    pause: FunctionFragment;
    unpause: FunctionFragment;
    constructor: FunctionFragment;
  };
}

export class PropsFeeSplitterContractAbi extends Contract {
  interface: PropsFeeSplitterContractAbiInterface;
  functions: {
    owner: InvokeFunction<[], StateOutput>;
    distribute_funds: InvokeFunction<[amount: BigNumberish], void>;
    fee: InvokeFunction<[], Option<BN>>;
    get_share: InvokeFunction<[], Option<BN>>;
    receive_funds: InvokeFunction<[], void>;
    set_fee: InvokeFunction<[fee: BigNumberish], void>;
    set_shares: InvokeFunction<[recipients: Vec<IdentityInput>, shares: Vec<BigNumberish>], void>;
    total_shares: InvokeFunction<[], Option<BN>>;
    is_paused: InvokeFunction<[], boolean>;
    pause: InvokeFunction<[], void>;
    unpause: InvokeFunction<[], void>;
    constructor: InvokeFunction<[owner: IdentityInput], void>;
  };
}
