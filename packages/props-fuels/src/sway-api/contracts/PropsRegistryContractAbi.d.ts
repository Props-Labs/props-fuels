/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.93.0
  Forc version: 0.62.0
  Fuel-Core version: 0.31.0
*/

import type {
  BigNumberish,
  BN,
  Bytes,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
  StdString,
} from 'fuels';

import type { Enum, Vec } from "./common";

export enum AccessErrorInput { NotOwner = 'NotOwner' };
export enum AccessErrorOutput { NotOwner = 'NotOwner' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum InitializationErrorInput { CannotReinitialized = 'CannotReinitialized' };
export enum InitializationErrorOutput { CannotReinitialized = 'CannotReinitialized' };
export type MetadataInput = Enum<{ B256: string, Bytes: Bytes, Int: BigNumberish, String: StdString }>;
export type MetadataOutput = Enum<{ B256: string, Bytes: Bytes, Int: BN, String: StdString }>;
export type StateInput = Enum<{ Uninitialized: [], Initialized: IdentityInput, Revoked: [] }>;
export type StateOutput = Enum<{ Uninitialized: [], Initialized: IdentityOutput, Revoked: [] }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type DeregisterEventInput = { contract_id: ContractIdInput };
export type DeregisterEventOutput = { contract_id: ContractIdOutput };
export type InitCollectionEventInput = { contract_id: ContractIdInput, owner: IdentityInput, name: StdString, symbol: StdString, base_uri: StdString, price: BigNumberish, start_date: BigNumberish, end_date: BigNumberish };
export type InitCollectionEventOutput = { contract_id: ContractIdOutput, owner: IdentityOutput, name: StdString, symbol: StdString, base_uri: StdString, price: BN, start_date: BN, end_date: BN };
export type InitEditionEventInput = { contract_id: ContractIdInput, owner: IdentityInput, name: StdString, symbol: StdString, metadata_keys: Vec<StdString>, metadata_values: Vec<MetadataInput>, price: BigNumberish, start_date: BigNumberish, end_date: BigNumberish };
export type InitEditionEventOutput = { contract_id: ContractIdOutput, owner: IdentityOutput, name: StdString, symbol: StdString, metadata_keys: Vec<StdString>, metadata_values: Vec<MetadataOutput>, price: BN, start_date: BN, end_date: BN };
export type OwnershipSetInput = { new_owner: IdentityInput };
export type OwnershipSetOutput = { new_owner: IdentityOutput };
export type RegisterEventInput = { contract_id: ContractIdInput, owner: IdentityInput };
export type RegisterEventOutput = { contract_id: ContractIdOutput, owner: IdentityOutput };

export interface PropsRegistryContractAbiInterface extends Interface {
  functions: {
    owner: FunctionFragment;
    constructor: FunctionFragment;
    deregister: FunctionFragment;
    init_collection: FunctionFragment;
    init_edition: FunctionFragment;
    register: FunctionFragment;
  };
}

export class PropsRegistryContractAbi extends Contract {
  interface: PropsRegistryContractAbiInterface;
  functions: {
    owner: InvokeFunction<[], StateOutput>;
    constructor: InvokeFunction<[owner: IdentityInput], void>;
    deregister: InvokeFunction<[contractId: ContractIdInput], void>;
    init_collection: InvokeFunction<[contract_id: ContractIdInput, owner: IdentityInput, name: StdString, symbol: StdString, baseUri: StdString, price: BigNumberish, startDate: BigNumberish, endDate: BigNumberish], void>;
    init_edition: InvokeFunction<[contract_id: ContractIdInput, owner: IdentityInput, name: StdString, symbol: StdString, metadata_keys: Vec<StdString>, metadata_values: Vec<MetadataInput>, price: BigNumberish, start_date: BigNumberish, end_date: BigNumberish], void>;
    register: InvokeFunction<[contractId: ContractIdInput, owner: IdentityInput], void>;
  };
}
